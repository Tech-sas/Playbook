{
  "name": "rework-vars",
  "version": "2.0.3",
  "description": "CSS spec style variables for Rework",
  "keywords": [
    "css",
    "rework",
    "variables",
    "vars"
  ],
  "license": "MIT",
  "dependencies": {
    "rework-visit": "1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.14.0",
    "rework": "~0.18.3",
    "chai": "~1.8.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/visionmedia/rework-vars.git"
  },
  "scripts": {
    "test": "mocha --no-colors"
  },
  "readme": "# rework-vars [![Build Status](https://travis-ci.org/reworkcss/rework-vars.png)](https://travis-ci.org/reworkcss/rework-vars)\n\nA [Rework](https://github.com/reworkcss/rework) plugin to add support for the\n[W3C-style CSS variables](http://www.w3.org/TR/css-variables/) syntax.\n\n**N.B.** This is _not_ a polyfill. This plugin aims to provide a future-proof\nway of using a _limited subset_ of the features provided by native CSS variables.\n\n## Installation\n\n```\nnpm install rework-vars\n```\n\n## Use\n\nAs a Rework plugin:\n\n```js\n// dependencies\nvar fs = require('fs');\nvar rework = require('rework');\nvar vars = require('rework-vars');\n\n// css to be processed\nvar css = fs.readFileSync('build/build.css', 'utf8').toString();\n\n// process css using rework-vars\nvar out = rework(css).use(vars()).toString();\n```\n\nOptionally, you may pass an object of variables - `map` - to the JavaScript\nfunction.\n\n```js\nvar map = {\n  'app-bg-color': 'white'\n}\n\nvar out = rework(css).use(vars(map)).toString();\n```\n\n## Supported features\n\nVariables can be declared as custom CSS properties on the `:root` element,\nprefixed with `var-`:\n\n```css\n:root {\n  var-my-color: red;\n}\n```\n\nVariables are applied using the `var()` function, taking the name of a variable\nas the first argument:\n\n```css\n:root {\n  var-my-color: red;\n}\n\ndiv {\n  color: var(my-color);\n}\n```\n\nFallback values are supported and are applied if a variable has not been\ndeclared:\n\n```css\n:root {\n  var-my-color: red;\n}\n\ndiv {\n  color: var(my-other-color, green);\n}\n```\n\nFallbacks can be \"complex\". Anything after the first comma in the `var()`\nfunction will act as the fallback value â€“ `var(name, fallback)`. Nested\nvariables are also supported:\n\n```css\n:root {\n  var-my-color: red;\n}\n\ndiv {\n  background: var(my-other-color, linear-gradient(var(my-color), rgba(255,0,0,0.5)));\n}\n```\n\n## What to expect\n\nVariables can _only_ be declared for, and scoped to the `:root` element. All\nother variable declarations are left untouched. Any known variables used as\nvalues are replaced.\n\n```css\n:root {\n  var-color-1: red;\n  var-color-2: green;\n}\n\n:root,\ndiv {\n  var-color-2: purple;\n  color: var(color-2);\n}\n\ndiv {\n  var-color-3: blue;\n}\n\nspan {\n  var-color-4: yellow;\n}\n```\n\nyields:\n\n```css\n:root,\ndiv {\n  var-color-2: purple;\n  color: green;\n}\n\ndiv {\n  var-color-3: blue;\n}\n\nspan {\n  var-color-4: yellow;\n}\n```\n\nVariables are not dynamic; they are replaced with normal CSS values. The value\nof a defined variable is determined by the last declaration of that variable\nfor `:root`.\n\n```css\n:root {\n  var-brand-color: green;\n}\n\n.brand {\n  color: var(brand-color);\n}\n\n:root {\n  var-brand-color: red;\n}\n```\n\nyields:\n\n```css\n.brand {\n  color: red;\n}\n```\n\nVariables declared within `@media` or `@supports` are not currently supported\nand will also be ignored.\n\n```css\n@media (min-width: 320px) {\n  :root {\n    var-brand-color: red;\n  }\n}\n```\n\nyields:\n\n```css\n@media (min-width: 320px) {\n  :root {\n    var-brand-color: red;\n  }\n}\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/visionmedia/rework-vars/issues"
  },
  "homepage": "https://github.com/visionmedia/rework-vars",
  "_id": "rework-vars@2.0.3",
  "dist": {
    "shasum": "f43f528c34668bdbe117bf3639779d58ca9e8c0a"
  },
  "_from": "rework-vars@2.0.3",
  "_resolved": "https://registry.npmjs.org/rework-vars/-/rework-vars-2.0.3.tgz"
}
